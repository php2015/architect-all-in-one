// - 首先事件环是为了实现js异步的，无论是node环境还是浏览器环境
// - js是单线程的，这里说的单线程，指的是js的（主线程），像我们平时使用的定时器，ajax 都是在主线程之外另开辟的线程去执行的任务。
// - 进程：是计算机分配任务的最小单位，进程里面包含多个线程，浏览器是由多个进程组成的
// - 1、EventLoop 解决的是js执行时候可能会调用异步方法，这些异步方法怎样调度执行的问题。
// - 2、js执行的时候，从上到下执行，遇到函数会创建执行上下文栈，执行完毕后出栈，执行的时候会发生异步事件 -> 内部会调用浏览器api
// - 3、当我们执行上下文栈都执行完毕后，等会可能api执行完成或者时间到达，会被从异步队列中拿出来执行，先进先出。不停的扫描队列，将队列里面的任务拿出来放到上下文栈中执行，循环线程是专门干这件事情的，检测当前栈中是否为空 如果为空，从事件队列中取出一个来执行 宏任务
// - 4、代码执行时候还会有些微任务，每次执行宏任务的时候都会单独创建一个微任务队列，也是先进先出
// - 5、微任务在执行完毕后，可能进行渲染，也可能不进行渲染，浏览器会检测是否需要重新渲染
// - 6、每次执行一次都会执行一个宏任务，并清空对应的微任务队列，每次循环完毕后，都要看是否要渲染，如果需要渲染才渲染。
// - 7、常见的宏任务 script脚本 界面渲染也是宏任务 setTimeout setInterval postMessage MessageChannel IE下面的setImmediate 
// - 8、常见的微任务: promise.then mutationobserver
// - 9、微任务中执行时候再生成微任务，会在本轮清空。